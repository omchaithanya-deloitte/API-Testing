{
	"info": {
		"_postman_id": "b3a400f3-08c3-4d54-9157-9b3c93421244",
		"name": "First Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// const response = pm.response.json();\r",
							"// const a = response.find(item => item.id === 40);\r",
							"// console.log(a);\r",
							"\r",
							"// console.log(typeof response.title);\r",
							"\r",
							"userId = \"\";\r",
							"response = pm.response.json();\r",
							"for(var i = 0 ; i < response.length ; i++){\r",
							"    if(response[i].id == \"40\"){\r",
							"        userId = response[i].userId;\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"The id is 40 and userId is 4\",() => {\r",
							"    pm.expect(userId === '4');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Title is of type String\",()=>{\r",
							"var res = pm.response.json();\r",
							"var count = 0;\r",
							"var l = res.length;\r",
							"for(var i = 0;i<res.length;i++){\r",
							"const str = res[i].title;\r",
							"if(typeof str === \"string\"){\r",
							"count++;\r",
							"    }\r",
							"}\r",
							"if(l == count){\r",
							"pm.expect(l).to.eql(count)\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\t\r\n\"name\": \"Arun\",\r\n   \"job\": \"Manager\",\r\n   \"updatedAt\": \"2021-06-11T07:07:25.866Z\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://reqres.in/api/users/",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Deletion successful\", () => {\r",
							"    pm.expect(!(pm.response === null))\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"userId\": 5,\r\n        \"id\": 41,\r\n        \"title\": \"non est facere\",\r\n        \"body\": \"molestias id nostrum\\nexcepturi molestiae dolore omnis repellendus quaerat saepe\\nconsectetur iste quaerat tenetur asperiores accusamus ex ut\\nnam quidem est ducimus sunt debitis saepe\"\r\n    }"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}